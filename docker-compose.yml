version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: email-assist-backend
    ports:
      - "8000:8000"
    environment:
      # Application Settings
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      
      # CORS Settings (allow frontend)
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
      
      # API Keys (set via environment variables)
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - GMAIL_CLIENT_ID=${GMAIL_CLIENT_ID}
      - GMAIL_CLIENT_SECRET=${GMAIL_CLIENT_SECRET}
      

      
      # AI Service Configuration
      - MAX_EMAIL_LENGTH=${MAX_EMAIL_LENGTH:-10000}
      - MAX_RESPONSE_LENGTH=${MAX_RESPONSE_LENGTH:-2000}
    volumes:
      # Persist user credentials and sessions
      - backend_credentials:/app/user_credentials
      - backend_sessions:/app/user_sessions
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/emails/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - email-assist-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: email-assist-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_APP_NAME="Email AI Assistant"
      - NEXT_PUBLIC_APP_VERSION="1.0.0"
      - NEXT_PUBLIC_AI_PROVIDER="Claude"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - email-assist-network

volumes:
  backend_credentials:
    driver: local
  backend_sessions:
    driver: local

networks:
  email-assist-network:
    driver: bridge 